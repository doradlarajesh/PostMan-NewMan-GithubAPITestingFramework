{
	"info": {
		"_postman_id": "93dc4f4d-c24d-4f6d-9666-60cd0df8453b",
		"name": "GitHub APIs",
		"description": "Play and Test Github APIs with Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Repositories",
			"item": [
				{
					"name": "Get User Repos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81cd4bd9-eebd-4d83-a684-634c23c28a7f",
								"exec": [
									"/* https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repositories-for-a-user */\r",
									"\r",
									"//Postman uses Chai Assertion library BDD style for readable tests\r",
									"//pm is a javascript postman objectwhich provides access to request, response data and variables\r",
									"\r",
									"//User collection variable is set at collection level pre-request script as it may be used in multiple requests. And folder level prerequest script is run before executing individual request.\r",
									"\r",
									"const reposResponse = pm.response;\r",
									"const jsonReposResponse = pm.response.json()\r",
									"\r",
									"//Test 1: Validate whether status of this api is 200\r",
									"pm.test(\"Status code is 200\",function(){\r",
									"   reposResponse.to.have.status(200)\r",
									"   reposResponse.to.have.status(\"OK\")\r",
									"});\r",
									"\r",
									"//Test2: Validating some header content\r",
									"\r",
									"pm.test(\" Response Header information is as expected\", function(){\r",
									"    reposResponse.to.have.header(\"Server\")\r",
									"    pm.expect(reposResponse.headers.get(\"Server\")).to.equal(\"GitHub.com\")\r",
									"\r",
									"    reposResponse.to.have.header(\"Content-Type\")\r",
									"    pm.expect(reposResponse.headers.get(\"Content-Type\")).to.equal(\"application/json; charset=utf-8\")\r",
									"\r",
									"});\r",
									"\r",
									"//Test3: Validating some header content is not present\r",
									"pm.test(\"Transfer-Encoding1234 shouldnt present in response Headers\",function(){\r",
									"    reposResponse.to.not.have.header(\"Transfer-Encoding1234\")\r",
									"\r",
									"});\r",
									"\r",
									"//Test 4: Validating Response cookies\r",
									"pm.test(\"No cookies should be present\",function(){\r",
									"    console.log(\"Cookie Count is  \" + pm.response.cookies.count())\r",
									"    pm.expect(pm.response.cookies.count()).to.eql(0)\r",
									"});\r",
									"\r",
									"//Test5: Get all public repo names and store in collection variable\r",
									"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
									"pm.collectionVariables.set(\"publicRepos\")\r",
									"\r",
									"let nuumberOfPublicRepos = Object.keys(pm.response.json())\r",
									"//JSON.parse(pm.response);\r",
									"console.log(\"nuumberOfPublicRepos\" + nuumberOfPublicRepos.length)\r",
									"\r",
									"\r",
									"//Test6 : Response Schema validation\r",
									"//https://transform.tools/json-to-json-schema\r",
									"\r",
									"const schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"node_id\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"name\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"full_name\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"private\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"owner\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"login\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"id\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"node_id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"avatar_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"gravatar_id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"html_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"followers_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"following_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"gists_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"starred_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"subscriptions_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"organizations_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"repos_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"events_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"received_events_url\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"type\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"site_admin\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"login\",\r",
									"          \"id\",\r",
									"          \"node_id\",\r",
									"          \"avatar_url\",\r",
									"          \"gravatar_id\",\r",
									"          \"url\",\r",
									"          \"html_url\",\r",
									"          \"followers_url\",\r",
									"          \"following_url\",\r",
									"          \"gists_url\",\r",
									"          \"starred_url\",\r",
									"          \"subscriptions_url\",\r",
									"          \"organizations_url\",\r",
									"          \"repos_url\",\r",
									"          \"events_url\",\r",
									"          \"received_events_url\",\r",
									"          \"type\",\r",
									"          \"site_admin\"\r",
									"        ]\r",
									"      },\r",
									"      \"html_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"description\": {\r",
									"        \"type\": [\"string\",\"null\"]\r",
									"      },\r",
									"      \"fork\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"forks_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"keys_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"collaborators_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"teams_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"hooks_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"issue_events_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"events_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"assignees_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"branches_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"tags_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"blobs_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"git_tags_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"git_refs_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"trees_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"statuses_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"languages_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"stargazers_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"contributors_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"subscribers_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"subscription_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"commits_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"git_commits_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"comments_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"issue_comment_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"contents_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"compare_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"merges_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"archive_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"downloads_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"issues_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"pulls_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"milestones_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"notifications_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"labels_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"releases_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"deployments_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"created_at\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"updated_at\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"pushed_at\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"git_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"ssh_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"clone_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"svn_url\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"homepage\": {},\r",
									"      \"size\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"stargazers_count\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"watchers_count\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"language\": {},\r",
									"      \"has_issues\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"has_projects\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"has_downloads\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"has_wiki\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"has_pages\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"has_discussions\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"forks_count\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"mirror_url\": {},\r",
									"      \"archived\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"disabled\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"open_issues_count\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"license\": {},\r",
									"      \"allow_forking\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"is_template\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"web_commit_signoff_required\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"topics\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {}\r",
									"      },\r",
									"      \"visibility\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"forks\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"open_issues\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"watchers\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"default_branch\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"permissions\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"admin\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"maintain\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"push\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"triage\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"pull\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"admin\",\r",
									"          \"maintain\",\r",
									"          \"push\",\r",
									"          \"triage\",\r",
									"          \"pull\"\r",
									"        ]\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"id\",\r",
									"      \"node_id\",\r",
									"      \"name\",\r",
									"      \"full_name\",\r",
									"      \"private\",\r",
									"      \"owner\",\r",
									"      \"html_url\",\r",
									"      \"fork\",\r",
									"      \"url\",\r",
									"      \"forks_url\",\r",
									"      \"keys_url\",\r",
									"      \"collaborators_url\",\r",
									"      \"teams_url\",\r",
									"      \"hooks_url\",\r",
									"      \"issue_events_url\",\r",
									"      \"events_url\",\r",
									"      \"assignees_url\",\r",
									"      \"branches_url\",\r",
									"      \"tags_url\",\r",
									"      \"blobs_url\",\r",
									"      \"git_tags_url\",\r",
									"      \"git_refs_url\",\r",
									"      \"trees_url\",\r",
									"      \"statuses_url\",\r",
									"      \"languages_url\",\r",
									"      \"stargazers_url\",\r",
									"      \"contributors_url\",\r",
									"      \"subscribers_url\",\r",
									"      \"subscription_url\",\r",
									"      \"commits_url\",\r",
									"      \"git_commits_url\",\r",
									"      \"comments_url\",\r",
									"      \"issue_comment_url\",\r",
									"      \"contents_url\",\r",
									"      \"compare_url\",\r",
									"      \"merges_url\",\r",
									"      \"archive_url\",\r",
									"      \"downloads_url\",\r",
									"      \"issues_url\",\r",
									"      \"pulls_url\",\r",
									"      \"milestones_url\",\r",
									"      \"notifications_url\",\r",
									"      \"labels_url\",\r",
									"      \"releases_url\",\r",
									"      \"deployments_url\",\r",
									"      \"created_at\",\r",
									"      \"updated_at\",\r",
									"      \"pushed_at\",\r",
									"      \"git_url\",\r",
									"      \"ssh_url\",\r",
									"      \"clone_url\",\r",
									"      \"svn_url\",\r",
									"      \"homepage\",\r",
									"      \"size\",\r",
									"      \"stargazers_count\",\r",
									"      \"watchers_count\",\r",
									"      \"language\",\r",
									"      \"has_issues\",\r",
									"      \"has_projects\",\r",
									"      \"has_downloads\",\r",
									"      \"has_wiki\",\r",
									"      \"has_pages\",\r",
									"      \"has_discussions\",\r",
									"      \"forks_count\",\r",
									"      \"mirror_url\",\r",
									"      \"archived\",\r",
									"      \"disabled\",\r",
									"      \"open_issues_count\",\r",
									"      \"license\",\r",
									"      \"allow_forking\",\r",
									"      \"is_template\",\r",
									"      \"web_commit_signoff_required\",\r",
									"      \"topics\",\r",
									"      \"visibility\",\r",
									"      \"forks\",\r",
									"      \"open_issues\",\r",
									"      \"watchers\",\r",
									"      \"default_branch\",\r",
									"      \"permissions\"\r",
									"    ]\r",
									"  }\r",
									"};\r",
									"\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"//JSON Schema can be validated by two approaces, one is Tiny Validatorv4 and AJV Schema validator. For 1st one we have to provide JSON Object converted and the other we dont need to\r",
									"\r",
									"//using Tiny Validator\r",
									"pm.expect(tv4.validate(jsonReposResponse,schema)).to.be.true\r",
									"//using nom AJV schema validator\r",
									"  pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"\r",
									"//Test 7 -- Validate evey repo's html_url contains \"https://github.com/{{username}}/{{reponame}}\r",
									"function followsURLRule(eachRepo){\r",
									"    return eachRepo.html_url ==  \"https://github.com/\" + pm.collectionVariables.get(\"user\") + \"/\" + eachRepo.name \r",
									"}\r",
									"\r",
									"pm.test(\"HTML URL is valid and follows rule\",function(){\r",
									"    pm.expect(jsonReposResponse.every(followsURLRule)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04f2ab08-078b-4b10-9699-914022736a9f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b3449bad-be7d-43c6-9475-8b3bff1ea7eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{usertoken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.github+json"
							},
							{
								"key": "X-GitHub-Api-Version",
								"value": "2022-11-28"
							}
						],
						"url": "https://api.github.com/users/{{user}}/repos"
					},
					"response": []
				},
				{
					"name": "Create a public Repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbb85a64-6289-462f-b63a-815721ce7282",
								"exec": [
									"/* https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#create-a-repository-for-the-authenticated-user */\r",
									"\r",
									"const createRepoResponse = pm.response;\r",
									"const jsonCreateRepoResponse = createRepoResponse.json();\r",
									"const createRepoRequest = pm.request;\r",
									"\r",
									"//To delete the repo again afterwards re-saving this repo name into same variable as we created in pre-request script. As that has random function previously we get a different one if use same without below code\r",
									"pm.collectionVariables.set(\"newRepoName\",JSON.parse(pm.request.body.raw).name)\r",
									"console.log(\"In tests: \"+ pm.collectionVariables.get(\"newRepoName\"))\r",
									"\r",
									"pm.test(\"Repo created successfully\", function(){\r",
									"    createRepoResponse.to.have.status(201)\r",
									"    createRepoResponse.to.have.status(\"Created\")\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5a947ef4-ff8b-4993-9ece-55eac7ccb91f",
								"exec": [
									"//Javascript Faker library can be used to generate Fake Data\r",
									"//Generate Fake Repo name\r",
									"\r",
									"pm.collectionVariables.set(\"newRepoName\",\"{{$randomLoremWord}}\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7f25ae90-6bed-4608-a448-f93ccc454f6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.github+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <YOUR-TOKEN>"
							},
							{
								"key": "X-GitHub-Api-Version",
								"value": "2022-11-28"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"type": "text",
									"key": "{\"name\":\"Hello-World\",\"description\":\"This is your first repo!\",\"homepage\":\"https://github.com\",\"private\":false,\"is_template\":true}",
									"value": ""
								}
							]
						},
						"url": "https://api.github.com/user/repos"
					},
					"response": []
				}
			],
			"id": "0de3309b-33dd-4499-bb9b-65155b383f59"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{usertoken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ea3b60ca-7a91-4536-a02a-aa0703b56177",
				"type": "text/javascript",
				"exec": [
					"pm.collectionVariables.set(\"user\",\"doradlarajesh\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f614cb53-884c-4e92-bdf7-660b4c20a90a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GitUserName",
			"value": "doradlarajesh"
		},
		{
			"key": "usertoken",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		},
		{
			"key": "publicRepos",
			"value": ""
		},
		{
			"key": "user",
			"value": "doradlarajesh"
		},
		{
			"key": "newRepoName",
			"value": ""
		}
	]
}